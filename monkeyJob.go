/*
Go program to simulate the "Shakespeare Monkey" problem using Go Routines

Author:
        Schuyler Martin
*/

package main;

import (
    "fmt";
    "os";
    "io/ioutil";
    "sync";
    "bytes";
    "strconv";
    "unicode/utf8";
    //"time";
)
//**************************
//Constants and Structures
//**************************

//Manually manage valid characters
const charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 " +
    "abcdefghijklmnopqrstuvwxyz" +
    "~!@#$%^&*()-_+={}[]\\|<,>.?/\"';:`";

type ShakesText struct {
    text string;
    length int;
}


/**
    Error handling function
    @param err Error to handle
*/
func handleErr(err error) {
    if err != nil {
        panic(err);
    }
}

/**
    Reads in a text file of "Shakespeare" that the monkeys need to duplicate
    @param file Text file to compare monkey output too
    @return The ShakesText equivalent structure
*/
func readShakespeare(file string) ShakesText{
    var shakesText ShakesText;
    text, err := ioutil.ReadFile(file);
    handleErr(err);
    shakesText.text = string(text);
    fmt.Println(shakesText.text, "''");
    shakesText.length = utf8.RuneCountInString(shakesText.text) - 1;
    return shakesText;
}

/**
    Simulates a monkey with a typewriter
    @param monkeyID ID of the monkey
    @param fileLength The number of characters the monkey needs to generate
    @return String generated by the monkey
*/
func monkey(monkeyID int, shakesText ShakesText) string{
    //generate random characters
    var buffer bytes.Buffer;
    for i := 0; i < shakesText.length; i++ {
        buffer.WriteString(string(charArray[0]));
    }
    fmt.Println(monkeyID, ": ", shakesText.length, ": ", buffer.String());
    return buffer.String();
}

/**
    Simulates a manager that checks the work of a monkey
    @param monkeyID ID of the monkey
    @param fileLength The number of characters the monkey needs to generate
    @return True if the monkey text matches, false otherwise
*/
func manager(monkeyID int, shakesText ShakesText) bool{
    //monkeyText := "";
    /*for monkeyText != shakesText.text {
        monkeyText = monkey(monkeyID, shakesText);
    }*/
    return true;
}

/**
    Main execution point. Handles monkeys.
    @param monkeyAmt Number of monkeys available
    @param file File to read-in
*/
func main() {
    if len(os.Args) != 3 {
        fmt.Println("Usage: monkeyJob int file");
        return;
    }
    num64, err := strconv.ParseInt(os.Args[1], 10, 32);
    handleErr(err);
    numMonkeys := int(num64);
    file := os.Args[2];
    shakesText := readShakespeare(file);
    //track the monkeys
    var wg sync.WaitGroup;
    wg.Add(numMonkeys);
    for i := 0; i < numMonkeys; i++ {
        go manager(i, shakesText);
    }
    wg.Wait();
    fmt.Println("Done");
}
