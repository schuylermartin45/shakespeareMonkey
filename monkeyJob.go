/*
Go program to simulate the "Shakespeare Monkey" problem using Go Routines

Author:
        Schuyler Martin
*/

package main;

import (
    "fmt";
    "os";
    "ioutil";
    //"time";
)

type ShakesText struct {
    text string;
    length int;
}

/**
    Reads in a text file of "Shakespeare" that the monkeys need to duplicate
    @param file Text file to compare monkey output too
    @return The ShakesText equivalent structure
*/
func readShakespeare(file string) ShakesText{
    var shakesText ShakesText;
    shakesText.text = string(ioutil.ReadFile(file));
    shakesText.length = len(shakesText.text);
    return shakesText;
}

/**
    Simulates a monkey with a typewriter
    @param monkeyID ID of the monkey
    @param fileLength The number of characters the monkey needs to generate
    @return String generated by the monkey
*/
func monkey(monkeyID int, shakesText ShakesText) string{
    //generate random characters
    for i := 0; i < shakesText.length; i++ {
        fmt.Println(n, ": ", i);
    }
    return "";
}

/**
    Simulates a manager that checks the work of a monkey
    @param monkeyText Text generated by a monkey
    @return True if the monkey text matches, false otherwise
*/
func manager(shakesText ShakesText) bool{
    return true;
}

/**
    Handles the monkey-manager relationship (monkey execution cycle)
    @
*/
func doMonkeyWork(monkeyID int, shakesText ShakesText) bool{
    return true;
}

/**
    Main execution point. Handles monkeys.
    @param monkeyAmt Number of monkeys available
    @param file File to read-in
*/
func main() {
    numMonkeys = os.Args[1];
    file = os.Args[2];
    shakesText = readShakespeare(file);

    for i := 0; i < numMonkeys; i++ {
      go monkey(i, );
    }
    fmt.Scanln();
}
